
services:
  web:
    build: .
    command: >
      sh -c "python manage.py wait_for_db &&
              python manage.py migrate &&
              python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      # DJANGO
      DJANGO_SETTINGS_MODULE: library_service.settings
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      # CELERY
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    depends_on:
      - db
      - redis

  worker:
    build: .
    container_name: app_worker
    command: celery -A library_service worker -l info
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      - db
      - redis

  beat:
    build: .
    container_name: app_beat
    command: celery -A library_service beat -l info
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      - db
      - redis

  redis:
    image: redis:7-alpine
    container_name: app_redis
    ports:
      - "6379:6379"

  db:
    image: postgres:16-alpine
    container_name: app_db
    env_file:
      - .env
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h localhost" ]
      interval: 5s
      timeout: 3s
      retries: 10

volumes:
  pg_data:
